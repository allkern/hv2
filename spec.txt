Hyrisc v2 ISA specification, revision 1:

5 MSBs hold instruction/instruction group.

00000 -> ALU register/ALU Immediate
00010 -> beq/bleq rs0, rs1, imm (MSB 0)
00100 -> bne/blne rs0, rs1, imm (MSB 0)
00110 -> bgt/blgt rs0, rs1, imm (MSB 0)
01000 -> bge/blge rs0, rs1, imm (MSB 0)
01010 -> blt/bllt rs0, rs1, imm (MSB 0)
01100 -> ble/blle rs0, rs1, imm (MSB 0)
01101 -> Branch register
01110 -> Coprocessor-CPU exchange
01111 -> System
10000 -> Load/Store/LEA (various modes)
10001 -> Load immediate
10010 -> beq/bleq rs0, rs1, imm (MSB 1)
10100 -> bne/blne rs0, rs1, imm (MSB 1)
10110 -> bgt/blgt rs0, rs1, imm (MSB 1)
11000 -> bge/blge rs0, rs1, imm (MSB 1)
11010 -> blt/bllt rs0, rs1, imm (MSB 1)
11100 -> ble/blle rs0, rs1, imm (MSB 1)
11110 -> Coprocessor instruction
11111 -> Coprocessor instruction
10011 -> seq.u/seq.s rs0, rs1, imm
10101 -> sne.u/sne.s rs0, rs1, imm
10111 -> sgt.u/sgt.s rs0, rs1, imm
11001 -> sge.u/sge.s rs0, rs1, imm
11011 -> slt.u/slt.s rs0, rs1, imm
11101 -> sle.u/sle.s rs0, rs1, imm
00001 -> Reserved (trap)
00011 -> Reserved (trap)
00101 -> Reserved (trap)
00111 -> Reserved (trap)
01001 -> Reserved (trap)
01011 -> Reserved (trap)

Encoding breakdown:

00000 -> ALU register/immediate:
iiiiixxx xxyyyyyz zzzz---- --OOOOMS (Register)
iiiiixxx xxIIIIII IIIIIIII IIOOOOMS (Immediate)
                             |   |+-> 0 -> Unsigned
                             |   |    1 -> Signed
                             |   |
                             |   +--> 0 -> Register mode
                             |        1 -> Immediate mode
                             |
                             +------> 0000 -> add
                                      0001 -> sub
                                      0010 -> mul
                                      0011 -> mla
                                      0100 -> div
                                      0101 -> mod
                                      0110 -> and
                                      0111 -> or
                                      1000 -> xor
                                      1001 -> lsl
                                      1010 -> lsr
                                      1011 -> asr
                                      1100 -> sx.b
                                      1101 -> sx.s
                                      1110 -> rol
                                      1111 -> ror

Sccc0 -> Branch immediate:
Iccc0xxx xxyyyyyI IIIIIIII IIIIIIIL
||                                +-> 0 -> b
||                                    1 -> bl
||
|+----------------------------------> 001 -> eq
|                                     010 -> ne
|                                     011 -> gt
|                                     100 -> ge
|                                     101 -> lt
|                                     110 -> le
|
+-----------------------------------> Immediate MSB

01101 -> Branch register:
01101xxx xxyyyyyz zzzzwwww wIIIccci
                               000 -> eq
                               001 -> ne
                               010 -> gt
                               011 -> ge
                               100 -> lt
                               101 -> le
                               110-111 -> Unused

01110 -> Coprocessor-CPU exchange:
01110xxx xxyyyyyy yyyycccc c--OOOOO
     CPUR  COPR       COPN    00000 -> mtcr
                              00001 -> mfcr
                              00010-11111 -> Reserved

1111x -> Coprocessor instruction:
1111iiii iiiiiiii iiiiiiii iiiicccc
    COPC                       COPN

01111 -> System:
01111ooo cccccccc cccccccc cccccccc
     000 -> syscall
     001 -> tpl0 \
     010 -> tpl1 | If privilege modes enabled
     011 -> tpl2 | otherwise generate exception
     100 -> tpl3 /
     101 -> debug
     110 -> excep
     111 -> Reserved

10000 -> Load/Store/LEA:
iiiiixxx xxyyyyyI IIIIIIII ISSOOmmm (Fixed)
iiiiixxx xxyyyyyz zzzzwwww wSSOOmmm (Register)
                            | | +--> 000 -> Add scaled register
                            | |      001 -> Sub scaled register
                            | |      010 -> Add shifted register
                            | |      011 -> Sub shifted register
                            | |      100 -> Add Fixed (MSB 0)
                            | |      101 -> Sub Fixed (MSB 0)
                            | |      110 -> Add Fixed (MSB 1)
                            | |      111 -> Sub Fixed (MSB 1)
                            | |
                            | +----> 00 -> load
                            |        01 -> store
                            |        10 -> lea
                            |        11 -> Reserved
                            |
                            +------> 00 -> b
                                     01 -> s
                                     10 -> l
                                     11 -> x (Reserved for CPU)

10001 -> Load immediate:
10001xxx xxIIIIII IIIIIIII IISsssss
                             |+-----> Left shift
                             |
                             +------> 0 -> No immediate sign-extension
                                      1 -> Sign-extend immediate

1ccc1 -> Set if Cond Immediate:
1ccc1xxx xxyyyyyI IIIIIIII IIIIIIIS
 |                                +-> 0 -> No immediate sign-extension
 |                                    1 -> Sign-extend immediate
 |
 +----------------------------------> 001 -> eq
                                      010 -> ne
                                      011 -> gt
                                      100 -> ge
                                      101 -> lt
                                      110 -> le

Instruction aliases (alu=any ALU op):
nop         -> add.u    r0, r0, r0
            -> alu      r0, r0, r0

mov rd, rs
            -> add      rd, r0, rs
            -> or       rd, r0, rs

not rd      -> xor.s    rd, 0xffff

rst rd      -> and.s    rd, 0x0000
            -> alu.u    rd, r0, r0
            -> li.s     rd, 0x0000

inc rd      -> add.u    rd, 1

dec rd      -> sub.u    rd, 1
            -> add.s    rd, -1

call rd     -> sub.u    sp, 4
               store.l  [sp], pc
               mov      pc, rd      ; add.u pc, r0, rd

ret         -> add.u    sp, 4
               load.l   pc, [sp-4]

push rd     -> sub.u    sp, 4
               store.l  [sp], rd

pop rd      -> add.u    sp, 4
               load.l   rd, [sp-4]

bxxi.S/blxxi.S rd, imm0, imm1
            -> sxx.S at, rd, imm0
               bne.S/blne.S at, r0, imm1

Privilege model:
This is an optional feature.

Processor starts in PL0 (highest privilege), can write cop0 regs through
mtcr. Code running on cores without privilege model feature is functionally
equivalent to code running on PL0.

PL0 -> HV
PL1 -> Kernel
PL2 -> OS
PL3 -> User

cop0 | WRITE | READ
PL0  | yes   | yes
PL1  | yes   | yes
PL2  | no    | yes
PL3  | no    | no

Example coprocessor usage:
# fn vu_add_float32(float a, float b) -> float
vu_add_float32:
    load.l  r1, arg_a
    mtcr    1, 9, r1
    load.l  r1, arg_b
    mtcr    1, 12, r1
                        # VU example ISA   oooooxxx xxyyyyyz zzzz----
    cpex    1, 0x2f53ba # fadd v9, v9, v12 10111010 01010011 00101111
    mfcr    r1, 1, 9
    mov     a0, r1
    ret

Encodings summary:
ALU register:               iiiiixxx xxyyyyyz zzzzz--- --OOOOMS
ALU immediate:              iiiiixxx xxIIIIII IIIIIIII IIOOOOMS
Branch register:            01101xxx xxyyyyyz zzzzwwww wIIIcccM
Branch immediate:           Sccc0xxx xxyyyyyI IIIIIIII IIIIIIIL
Coprocessor-CPU exchange:   01110xxx xxyyyyyy yyyycccc c--OOOOO
Coprocessor instruction:    1111iiii iiiiiiii iiiiiiii iiiicccc
System:                     01111ooo cccccccc cccccccc cccccccc
Load/Store/LEA Fixed:       iiiiixxx xxyyyyyI IIIIIIII ISSOOmmm
Load/Store/LEA Register:    iiiiixxx xxyyyyyz zzzzwwww wSSOOmmm
Load immediate:             10001xxx xxIIIIII IIIIIIII IISsssss
Set Cond Immediate:         1ccc1xxx xxyyyyyI IIIIIIII IIIIIIIS